apply plugin: 'maven'
apply plugin: 'signing'


/**
 * Add the ability to deploy on OSSRH. Defines a well structured pom with the information read
 * from the properties files. Here are the key you need to have defined somewhere:
 * <ul>
 *     <li>ossrhSnapshotRepository</li>
 *     <li>ossrhRepository</li>
 *     <li>pomGroup: must be a sub group of com.yoti</li>
 *     <li>pomName</li>
 *     <li>pomPackaging</li>
 *     <li>pomDescription</li>
 *     <li>pomUrl</li>
 *     <li>pomScmUrl</li>
 *     <li>pomScmConnection</li>
 *     <li>pomScmDevConnection</li>
 *     <li>pomLicenseName</li>
 *     <li>pomLicenseUrl</li>
 *     <li>pomDeveloperNames: comma separated, should be the same order and numbers than pomDeveloperIds</li>
 *     <li>pomDeveloperIds: comma separated, should be the same order and numbers than pomDeveloperNames</li>
 *     <li>artifactsToArchive: comma separated list of extra task that produce artifacts.
 *     THis will be used to add extra artifacts to the publication</li>
 * </ul>
 */



nexusStaging {
    packageGroup = "com.yoti" //optional if packageGroup == project.getGroup()
    //stagingProfileId = "yourStagingProfileId" //when not defined will be got from server using "packageGroup"

    username = sonatypeUsername
    password = sonatypePassword
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = pomGroup
                pom.artifactId = artefactName
                pom.version = currentVersion

                repository(url: ossrhRepository) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                snapshotRepository(url: ossrhSnapshotRepository) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                PublishArtifactSet set = configurations.archives.artifacts
                set.each { org.gradle.api.internal.artifacts.publish.ArchivePublishArtifact pa ->
                    // check if the artefact generated contains SNAPSHOT => debug, add to the name
                    // for later exclusion filter
                    if(pa.getFile().getAbsolutePath().contains("-SNAPSHOT") &&
                            !pa.getArchiveTask().version.contains("-SNAPSHOT")){

                        pa.getArchiveTask().version +="-SNAPSHOT"
                    }
                }

                // Exclude SNAPSHOT for release
                // Exclude non SNAPSHOT for debug
                configurations.archives.artifacts.removeAll { PublishArtifact publishArtifact ->
                    boolean isReleaseVersion = !currentVersion.contains("-SNAPSHOT")
                    boolean isSnapshotVersion = publishArtifact.getArchiveTask().version.contains("-SNAPSHOT")
                    boolean isReleaseArtefact = publishArtifact.classifier!=null && publishArtifact.classifier.contains("release")
                    boolean isDebugArtefact = publishArtifact.classifier!=null && publishArtifact.classifier.contains("debug")

                    boolean remove =
                            (isReleaseVersion && (isSnapshotVersion || isDebugArtefact)) || /* release version => exclude snapshot version or debug artefact */
                                    (!isReleaseVersion && (!isSnapshotVersion || isReleaseArtefact)) /* snapshot version => exclude non snapshot version or release artefact */

                    return remove
                }

                pom.whenConfigured { p ->
                    p.dependencies.each { dep ->
                        // Remove all exclusion (groupId='*'is there for a strange reason)
                        dep.exclusions = null
                    }
                }

                pom.project {
                    name pomName
                    packaging pomPackaging
                    description pomDescription
                    url pomUrl

                    scm {
                        url pomScmUrl
                        connection pomScmConnection
                        developerConnection pomScmDevConnection
                    }

                    licenses {
                        license {
                            name pomLicenseName
                            url pomLicenseUrl
                        }
                    }

                    developers {

                        String[] devNames = pomDeveloperNames.split(",")
                        String[] devIds = pomDeveloperIds.split(",")
                        if (devNames == null || devIds == null || devNames.length != devIds.length) {
                            println("pomDeveloperNames and pomDeveloperIds must be have comma seprated entries. The count must be the same")
                        } else {
                            for (int i = 0; i < devNames.length; i++) {
                                developer {
                                    id devIds[i]
                                    name devNames[i]
                                }
                            }
                        }
                    }

                }
            }
        }
    }

    signing {
        required { !currentVersion.contains("-SNAPSHOT") }
        sign configurations.archives
    }

    artifacts {
        String[] taskNames = artifactsToArchive.split(",")
        taskNames.each {
            archives tasks[it.toString()]
        }
    }
}